{"version":3,"sources":["inspector.js"],"names":["Inspect","signup","req","res","next","response400","status","json","error","message","firstname","lastname","othernames","username","phoneNumber","email","password","confirmPassword","adminSecret","body","requiredFields","missingFields","map","field","index","keys","undefined","filter","join","Validator","isValidName","customValidateEmail","isMatchingPasswords","isValidPhoneNumber","isPasswordTooShort","userExists","pool","query","rowCount","console","log","toString","trim","picture","file","path","registered","Date"],"mappings":"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","file":"inspector.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/server/middleware","sourcesContent":["import Validator from '../validators/validator';\nimport pool from '../db/config';\nimport moment from 'moment';\n\nclass Inspect {\n  static async signup(req, res, next) {\n    const response400 = message => res.status(400).json({ status: 400, error: message });\n    const {\n      firstname,\n      lastname,\n      othernames,\n      username,\n      phoneNumber,\n      email,\n      password,\n      confirmPassword,\n      adminSecret,\n    } = req.body;\n\n    const requiredFields = [firstname, lastname, phoneNumber, email, password, confirmPassword];\n    const missingFields = requiredFields.map((field, index) => {\n      const keys = {\n        0: 'firstname',\n        1: 'lastname',\n        2: 'phoneNumber',\n        3: 'email',\n        4: 'password',\n        5: 'confirmPassword',\n      };\n      return (field === undefined || field === '') ? keys[index] : null;\n    }).filter(field => field !== null).join(', ');\n\n    if (!firstname || !lastname || !phoneNumber || !email || !password || !confirmPassword) {\n      return response400(`values are required for the following fields: ${missingFields}`);\n    }\n\n    if (!Validator.isValidName(firstname)) return response400('invalid first name. First name must be a minimum of 2 characters');\n    if (!Validator.isValidName(lastname)) return response400('invalid last name. Last name must be a minimum of 2 characters');\n    if (Validator.customValidateEmail(email).error) {\n      return response400(Validator.customValidateEmail(email).message);\n    }\n    if (!Validator.isMatchingPasswords(password, confirmPassword)) return response400('the two passwords do not match');\n    if (!Validator.isValidPhoneNumber(phoneNumber)) return response400('Invalid phone number. Phone number cannot contain characters, and must be less than 16 digits long');\n    if (Validator.isPasswordTooShort(password)) return response400('Invalid password. Password should have a minimum of 6 characters');\n\n    try {\n      const userExists = (await pool.query('SELECT * FROM users WHERE email=$1', [email])).rowCount;\n      if(userExists) return response400(`${email} has been taken. Please choose another email`);\n    } catch(error) {\n      console.log(error);\n      return response400(`${error}`); // keep an eye on this line\n    }\n    req.firstname = firstname.toString().trim();\n    req.lastname = lastname.toString().trim();\n    req.othernames = othernames || null;\n    req.username = username || null;\n    req.phoneNumber = phoneNumber.toString().trim();\n    req.email = email.toString().trim();\n    req.password = password.toString().trim();\n    req.picture = req.file ? req.file.path : null;\n    req.registered = moment(new Date());\n    req.adminSecret = adminSecret.toString().trim();\n\n    return next();\n  } // END signup\n} // END Inspect\n\nexport default Inspect;\n"]}