{"version":3,"sources":["validator.js"],"names":["Validator","customValidateEmail","email","emailChecker","verifyEmail","toString","trim","regxValidateEmail","re","test","toLowerCase","isPasswordTooShort","password","length","isMatchingPasswords","confirmPassword","isValidName","name","isValidPhoneNumber","phoneNumber","number","arr","split","i","Number","isNaN"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,SAAN,CAAgB;AACd,SAAOC,mBAAP,CAA2BC,KAA3B,EAAkC;AAChC,WAAOC,uBAAaC,WAAb,CAAyBF,MAAMG,QAAN,GAAiBC,IAAjB,EAAzB,CAAP;AACD;;AAED,SAAOC,iBAAP,CAAyBL,KAAzB,EAAgC;AAC9B,UAAMM,KAAK,yCAAX;AACA,WAAOA,GAAGC,IAAH,CAAQP,MAAMI,IAAN,GAAaI,WAAb,EAAR,CAAP;AACD;;AAED,SAAOC,kBAAP,CAA0BC,QAA1B,EAAoC;AAClC,WAAOA,SAASN,IAAT,GAAgBO,MAAhB,GAAyB,CAAhC;AACD;;AAED,SAAOC,mBAAP,CAA2BF,QAA3B,EAAqCG,eAArC,EAAsD;AACpD,WAAOH,SAASN,IAAT,OAAoBS,gBAAgBT,IAAhB,EAA3B;AACD;;AAED,SAAOU,WAAP,CAAmBC,IAAnB,EAAyB;AACvB,WAAOA,KAAKZ,QAAL,GAAgBC,IAAhB,GAAuBO,MAAvB,IAAiC,CAAxC;AACD;;AAED,SAAOK,kBAAP,CAA0BC,WAA1B,EAAuC;AACrC,UAAMC,SAASD,YAAYd,QAAZ,GAAuBC,IAAvB,EAAf;AACA,UAAMe,MAAMD,OAAOE,KAAP,CAAa,EAAb,CAAZ;AACA,QAAGD,IAAIR,MAAJ,GAAa,EAAhB,EAAoB,OAAO,KAAP;AACpB,SAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIF,IAAIR,MAAxB,EAAgCU,KAAK,CAArC,EAAwC;AACtC,UAAIC,OAAOC,KAAP,CAAaD,OAAOH,IAAIE,CAAJ,CAAP,CAAb,KAAgCF,IAAIE,CAAJ,MAAW,GAA3C,IAAkDF,IAAIE,CAAJ,MAAW,GAA7D,IAAoEF,IAAIE,CAAJ,MAAW,GAAnF,EAAwF;AACtF,eAAO,KAAP;AACD;AACF;AACD,WAAO,IAAP;AACD;AAhCa,C,CAiCf;;kBAEcvB,S","file":"validator.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/server/validators","sourcesContent":["import pool from '../db/config';\nimport emailChecker from './emailChecker';\n\nclass Validator {\n  static customValidateEmail(email) {\n    return emailChecker.verifyEmail(email.toString().trim());\n  }\n\n  static regxValidateEmail(email) {\n    const re = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}/ig;\n    return re.test(email.trim().toLowerCase());\n  }\n\n  static isPasswordTooShort(password) {\n    return password.trim().length < 6;\n  }\n\n  static isMatchingPasswords(password, confirmPassword) {\n    return password.trim() === confirmPassword.trim();\n  }\n\n  static isValidName(name) {\n    return name.toString().trim().length >= 2;\n  }\n\n  static isValidPhoneNumber(phoneNumber) {\n    const number = phoneNumber.toString().trim();\n    const arr = number.split('');\n    if(arr.length > 15) return false;\n    for (let i = 0; i < arr.length; i += 1) {\n      if (Number.isNaN(Number(arr[i])) && arr[i] !== ' ' && arr[i] !== '+' && arr[i] !== '-') {\n        return false;\n      }\n    }\n    return true;\n  }\n}// END Validator\n\nexport default Validator;\n"]}