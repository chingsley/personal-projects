{"version":3,"sources":["auth.spec.js"],"names":["dotenv","config","chai","use","chaiHttp","before","dropAndRecreateTables","describe","it","done","request","app","post","send","users","invalidUserNoData","end","err","res","status","should","eql","body","be","an","that","has","keys","error","incorrectFirstname","incorrectLastname","incorrectEmail","invalidUserMissmatchedPassword","passwordTooShort"],"mappings":"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","file":"auth.spec.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/tests/routes","sourcesContent":["import chai from 'chai';\nimport 'chai/register-should';\nimport chaiHttp from 'chai-http';\nimport dotenv from 'dotenv';\nimport app from '../../server/index';\nimport { users, dropAndRecreateTables } from '../seed/seed';\n\ndotenv.config();\nchai.use(chaiHttp);\n\nbefore(dropAndRecreateTables); // RESET: drop all tables, recreate repopulate with default values 'before' the test begins\n\ndescribe('POST /auth/signup', () => {\n    it('it should respond with a 400 error message for missing fields', (done) => {\n        chai.request(app)\n        .post('/api/v1/auth/signup')\n        .send(users.invalidUserNoData)\n        .end((err, res) => {\n            if (err) done(err);\n\n            res.status.should.eql(400);\n            res.body.should.be.an('object').that.has.keys(['status', 'error']);\n            res.body.status.should.eql(400);\n            res.body.error.should.eql('values are required form the following fields: firstname, lastname, phoneNumber, email, password, confirmPassword');\n            done();\n        });\n    });\n\n    it('it should respond with a 400 error message if firstname is less than 2 characters', (done) => {\n        chai.request(app)\n        .post('/api/v1/auth/signup')\n        .send(users.incorrectFirstname)\n        .end((err, res) => {\n            if (err) done(err);\n\n            res.status.should.eql(400);\n            res.body.should.be.an('object').that.has.keys(['status', 'error']);\n            res.body.status.should.eql(400);\n            res.body.error.should.eql('invalid first name. First name must be a minimum of 2 characters');\n            done();\n        });\n    });\n\n    it('it should respond with a 400 error message if lastname is less than 2 characters', (done) => {\n        chai.request(app)\n        .post('/api/v1/auth/signup')\n        .send(users.incorrectLastname)\n        .end((err, res) => {\n            if (err) done(err);\n\n            res.status.should.eql(400);\n            res.body.should.be.an('object').that.has.keys(['status', 'error']);\n            res.body.status.should.eql(400);\n            res.body.error.should.eql('invalid last name. Last name must be a minimum of 2 characters');\n            done();\n        });\n    });\n\n    it('it should respond with a 400 error message for a wrongly formatted email', (done) => {\n        chai.request(app)\n        .post('/api/v1/auth/signup')\n        .send(users.incorrectEmail)\n        .end((err, res) => {\n            if (err) done(err);\n\n            res.status.should.eql(400);\n            res.body.should.be.an('object').that.has.keys(['status', 'error']);\n            res.body.status.should.eql(400);\n            res.body.error.should.eql('email: leading dash in front of domain is not allowed');\n            done();\n        });\n    });\n\n    it('it should respond with a 400 error message if the two passwords do not match', (done) => {\n        chai.request(app)\n        .post('/api/v1/auth/signup')\n            .send(users.invalidUserMissmatchedPassword)\n        .end((err, res) => {\n            if (err) done(err);\n\n            res.status.should.eql(400);\n            res.body.should.be.an('object').that.has.keys(['status', 'error']);\n            res.body.status.should.eql(400);\n            res.body.error.should.eql('the two passwords do not match');\n            done();\n        });\n    });\n\n    it('it should respond with a 400 error message if password is less than 6 characters', (done) => {\n        chai.request(app)\n        .post('/api/v1/auth/signup')\n            .send(users.passwordTooShort)\n        .end((err, res) => {\n            if (err) done(err);\n\n            res.status.should.eql(400);\n            res.body.should.be.an('object').that.has.keys(['status', 'error']);\n            res.body.status.should.eql(400);\n            res.body.error.should.eql('Invalid password. Password should have a minimum of 6 characters');\n            done();\n        });\n    });\n});"]}