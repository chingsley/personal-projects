{"version":3,"sources":["inspector.js"],"names":["Inspect","signup","req","res","next","response400","message","status","json","error","firstname","lastname","othernames","username","phoneNumber","email","password","confirmPassword","picture","adminSecret","body","requiredFields","missingFields","map","field","index","keys","undefined","filter","join","response","Validator","isValidName","name","isEmail","isMatchingPasswords","isValidPassword","trim"],"mappings":";;;;;;AAAA;;;;;;AACA;;AAEA,MAAMA,OAAN,CAAc;AACZ,SAAOC,MAAP,CAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B,UAAMC,cAAcC,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeE,OAAOH,OAAtB,EAArB,CAA/B;AACA,UAAM;AACJI,eADI,EACOC,QADP,EACiBC,UADjB,EAC6BC,QAD7B,EACuCC,WADvC,EACoDC,KADpD,EAC2DC,QAD3D,EACqEC,eADrE,EACsFC,OADtF,EAC+FC;AAD/F,QAEFjB,IAAIkB,IAFR;;AAIA,UAAMC,iBAAiB,CAACX,SAAD,EAAYC,QAAZ,EAAsBG,WAAtB,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoDC,eAApD,CAAvB;AACA,UAAMK,gBAAgBD,eAAeE,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzD,YAAMC,OAAO;AACX,WAAG,WADQ;AAEX,WAAG,UAFQ;AAGX,WAAG,aAHQ;AAIX,WAAG,OAJQ;AAKX,WAAG,UALQ;AAMX,WAAG;AANQ,OAAb;AAQA,aAAQF,UAAUG,SAAV,IAAuBH,UAAU,EAAlC,GAAwCE,KAAKD,KAAL,CAAxC,GAAsD,IAA7D;AACD,KAVqB,EAUnBG,MAVmB,CAUZJ,SAASA,UAAU,IAVP,EAUaK,IAVb,CAUkB,IAVlB,CAAtB;;AAYA,QAAI,CAACnB,SAAD,IAAc,CAACC,QAAf,IAA2B,CAACG,WAA5B,IAA2C,CAACC,KAA5C,IAAqD,CAACC,QAAtD,IAAkE,CAACC,eAAvE,EAAwF;AACtF,aAAOZ,YAAa,kDAAiDiB,aAAc,EAA5E,CAAP;AACD;;AAED,UAAMQ,WAAWxB,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,OAAV,EAAmBD,OAAnB,EAArB,CAA5B;;AAEA,QAAI,CAACyB,oBAAUC,WAAV,CAAsBC,IAAtB,CAAL,EAAkC,OAAOH,SAAS,cAAT,CAAP;AAClC,QAAIC,oBAAUG,OAAV,CAAkBnB,KAAlB,EAAyBN,KAA7B,EAAoC,OAAOqB,SAASC,oBAAUG,OAAV,CAAkBnB,KAAlB,EAAyBT,OAAlC,CAAP;AACpC,QAAI,CAACyB,oBAAUI,mBAAV,CAA8BnB,QAA9B,EAAwCC,eAAxC,CAAL,EAA+D,OAAOa,SAAS,gCAAT,CAAP;AAC/D,QAAI,CAACC,oBAAUK,eAAV,CAA0BpB,QAA1B,CAAL,EAA0C,OAAOc,SAAS,kBAAT,CAAP;;AAE1C5B,QAAI+B,IAAJ,GAAWA,KAAKI,IAAL,EAAX;AACAnC,QAAIa,KAAJ,GAAYA,MAAMsB,IAAN,EAAZ;AACAnC,QAAIc,QAAJ,GAAeA,SAASqB,IAAT,EAAf;AACAnC,QAAIiB,WAAJ,GAAkBA,WAAlB;AACA,WAAOf,MAAP;AACD,GApCW,CAoCV;AApCU,C,CAqCZ;;kBAEaJ,O","file":"inspector.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/server/middleware","sourcesContent":["import Validator from '../validators/validator';\n// import pool from '../db/config';\n\nclass Inspect {\n  static signup(req, res, next) {\n    const response400 = message => res.status(400).json({ status: 400, error: message });\n    const {\n      firstname, lastname, othernames, username, phoneNumber, email, password, confirmPassword, picture, adminSecret,\n    } = req.body;\n\n    const requiredFields = [firstname, lastname, phoneNumber, email, password, confirmPassword];\n    const missingFields = requiredFields.map((field, index) => {\n      const keys = {\n        0: 'firstname',\n        1: 'lastname',\n        2: 'phoneNumber',\n        3: 'email',\n        4: 'password',\n        5: 'confirmPassword',\n      };\n      return (field === undefined || field === '') ? keys[index] : null;\n    }).filter(field => field !== null).join(', ');\n\n    if (!firstname || !lastname || !phoneNumber || !email || !password || !confirmPassword) {\n      return response400(`values are required form the following fields: ${missingFields}`);\n    }\n\n    const response = message => res.status(400).json({ status: 'error', message });\n\n    if (!Validator.isValidName(name)) return response('invalid name');\n    if (Validator.isEmail(email).error) return response(Validator.isEmail(email).message);\n    if (!Validator.isMatchingPasswords(password, confirmPassword)) return response('the two passwords do not match');\n    if (!Validator.isValidPassword(password)) return response('invalid password');\n\n    req.name = name.trim();\n    req.email = email.trim();\n    req.password = password.trim();\n    req.adminSecret = adminSecret;\n    return next();\n  } // end static signup\n} // END Inspect\n\nexport default Inspect;\n"]}