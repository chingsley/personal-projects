{"version":3,"sources":["authController.js"],"names":["AuthController","signup","req","res","next","firstname","lastname","othernames","username","phoneNumber","email","password","picture","registered","adminSecret","isAdmin","process","env","ADMIN_SECRET","hashedPassword","bcrypt","hash","dbQuery","pool","query","error","status","json","signin","send","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,MAAMA,cAAN,CAAqB;AACjB,WAAaC,MAAb,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AAAA;AAChC,kBAAM;AACFC,yBADE;AAEFC,wBAFE;AAGFC,0BAHE;AAIFC,wBAJE;AAKFC,2BALE;AAMFC,qBANE;AAOFC,wBAPE;AAQFC,uBARE;AASFC,0BATE;AAUFC;AAVE,gBAWFZ,GAXJ;AAYA,kBAAMa,UAAUD,gBAAgBE,QAAQC,GAAR,CAAYC,YAA5B,GAA2C,IAA3C,GAAkD,KAAlE;;AAEA,gBAAI;AACA;AACA,sBAAMC,iBAAiB,MAAMC,iBAAOC,IAAP,CAAYV,QAAZ,EAAsB,EAAtB,CAA7B;AACA,sBAAMW,UAAW;;;;;;;;;;;8DAAjB;AAYA,sBAAMC,iBAAKC,KAAL,CAAWF,OAAX,EAAoB,CACtBjB,SADsB,EAEtBC,QAFsB,EAGtBC,UAHsB,EAItBC,QAJsB,EAKtBC,WALsB,EAMtBC,KANsB,EAOtBS,cAPsB,EAQtBP,OARsB,EAStBC,UATsB,EAUtBE,OAVsB,CAApB,CAAN;AAYA,uBAAOX,MAAP;AACH,aA5BD,CA4BE,OAAOqB,KAAP,EAAc;AACZ,uBAAOtB,IAAIuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,KAAF,EAArB,CAAP;AACH;AA7C+B;AA8CnC,KA/CgB,CA+ChB;;AAED,WAAaG,MAAb,CAAoB1B,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AAAA;AAChCD,gBAAI0B,IAAJ,CAAS,EAACC,SAAS,mCAAV,EAAT;AADgC;AAEnC;;AAnDgB,C,CAqDnB;;kBAEa9B,c","file":"authController.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport pool from '../db/config';\n\nclass AuthController {\n    static async signup(req, res, next) {\n        const {\n            firstname,\n            lastname,\n            othernames,\n            username,\n            phoneNumber,\n            email,\n            password,\n            picture,\n            registered,\n            adminSecret,\n        } = req;\n        const isAdmin = adminSecret === process.env.ADMIN_SECRET ? true : false;\n\n        try {\n            // Hash password and save user to database\n            const hashedPassword = await bcrypt.hash(password, 10);\n            const dbQuery = `INSERT INTO users(\n                firstname,\n                lastname,\n                othernames,\n                username,\n                phonenumber,\n                email,\n                password,\n                picture,\n                registered,\n                is_admin,\n            ) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`;\n            await pool.query(dbQuery, [\n                firstname,\n                lastname,\n                othernames,\n                username,\n                phoneNumber,\n                email,\n                hashedPassword,\n                picture,\n                registered,\n                isAdmin\n            ]);\n            return next();\n        } catch (error) {\n            return res.status(400).json({ error });\n        }\n    }// END signup\n\n    static async signin(req, res, next) {\n        res.send({message: 'welcome to the sign in controller'});\n    }\n\n} // END AuthController\n\nexport default AuthController;\n"]}