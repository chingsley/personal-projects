{"version":3,"sources":["emailChecker.js"],"names":["emailTest","dotCom","email","i","lastIndexOf","dom","slice","d","undefined","dotOrg","dotNet","isValidDomChar","char","codePointAt","indexOf","isNaN","Number","verifyEmail","str","msg","error","message","quoted","domArr","split","lp","lpArr","specialChars","length","x","y","String","fromCodePoint","m","n"],"mappings":"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","file":"emailChecker.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/server/validators","sourcesContent":["/* eslint-disable */\nconst emailTest = {\n    // Return true is an email ends with '.com', else return false\n    dotCom(email) {\n        const i = email.lastIndexOf('@');\n        const dom = email.slice(i + 1);\n        let d = dom.lastIndexOf('.com');\n        if (dom[d + 4] === undefined) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    // Return true is an email ends with '.org', else return false\n    dotOrg(email) {\n        const i = email.lastIndexOf('@');\n        const dom = email.slice(i + 1);\n        let d = dom.lastIndexOf('.org');\n        if (dom[d + 4] === undefined) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    // Return true is an email ends with '.org', else return false\n    dotNet(email) {\n        const i = email.lastIndexOf('@');\n        const dom = email.slice(i + 1);\n        let d = dom.lastIndexOf('.net');\n        if (dom[d + 4] === undefined) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    // Return false if the domain name contains an invalid character\n    isValidDomChar(char, dom) {\n        if ((char.codePointAt(0) >= 65 && char.codePointAt(0) <= 90)) {\n            return true;\n        }\n        if ((char.codePointAt(0) >= 97 && char.codePointAt(0) <= 122)) {\n            return true;\n        }\n        if ((char === '-' && dom.indexOf(char) != 0)) {\n            return true;\n        }\n        if (char === '.') {\n            return true;\n        }\n        if (!isNaN(Number(char))) {\n            return true;\n        }\n\n        return false;\n    },\n\n    // format of email address is [ local-part@domain ]\n    /**\n     * Method to verify the email\n     * @param {string} email to be verified (var str),  \n     * @returns {object} an object with two properties\n     *        error: true for invalid email, and false for valid email\n     *        message: contains info about the email or the error \n     */\n\n    verifyEmail(str) {\n        let msg = '';\n\n        // If mail does not contain '@' return error\n        if (str.indexOf('@') < 0) {\n            msg = `email is missing the '@' character`;\n            return { error: true, message: msg };\n        }\n        let quoted = false;\n        const i = str.lastIndexOf('@');\n        const dom = str.slice(i + 1);\n        const domArr = dom.split('');\n        const lp = str.slice(0, i);\n        const lpArr = lp.split('');\n        const specialChars = `\"^'(),:;<>@[\\\\]`.split('');\n\n        // To determine whether the local-part of email is quoted (in double quotation marks)\n        if (lp[0] === `\"` && lp[lp.length - 1] === `\"`) {\n            quoted = true;\n        }\n\n        if (lp.length < 1) {\n            msg = `your email is missing the username part. Format: [username]@[domain]`;\n            return { error: true, message: msg };\n        }\n\n        if (dom.length < 1) {\n            msg = `your email is missing the domain part. Format: [username]@[domain]`;\n            return { error: true, message: msg };\n        }\n\n        if (lp.length > 64) {\n            msg = `the username part of your email cannot contain more than 64 characters`;\n            return { error: true, message: msg };\n        }\n\n\n\n        if (dom.length > 255) {\n            msg = `the domain part of your email cannot contain more than 255 characters`;\n            return { error: true, message: msg };\n        }\n\n        // local-part cannot start or end with a dot\n        if (lpArr[0] === '.' || lpArr[lpArr.length - 1] === '.') {\n            msg = `a dot (.) cannot start or end username part of your email, the username is unless quoted`;\n            return { error: true, message: msg };\n        }\n\n        // email (local-part) name should not contain consecutive dots\n        let x = -1;\n        for (let i = 0; i < lp.length; i++) {\n            x = lp.indexOf('.', x + 1); // starts from index 0, and finds the next instance of '.' with every loop\n            // console.log(x);\n            let y = x + 1; // n is index of the next character following the current dot\n            if (lp[x] === lp[y]) {\n                msg = `email: consecutive dots are not allowed, unless the username is quoted`;\n                return { error: true, message: msg };\n            }\n        }\n\n        // cannot contain more than one @ without quotes\n        if ((lp.indexOf('@') > -1) && !quoted) {\n            msg = `email: only one @ is allowed outside quotation marks`;\n            return { error: true, message: msg };\n        }\n\n        // cannot contain a space without quotes\n        if ((lp.indexOf(' ') > -1) && !quoted) {\n            msg = `email username cannot contain spaces, unless the username is quoted`;\n            return { error: true, message: msg };\n        }\n\n        // cannot contain some special chars like \"(),:;<>@[\\\\] without qoutes\n        for (let i = 0; i < specialChars.length; i++) {\n            if ((lp.indexOf(specialChars[i]) > -1) && !quoted) {\n                msg = `email cannot contain '${specialChars[i]}' outside quotation marks`;\n                return { error: true, message: msg };\n            }\n        }\n\n        // Should not contain line formatting characters like \\n.\n        // Recall: Line formatting characters fall within the range\n        // of character codes from 0 to 32\n        for (let i = 0; i < 32; i++) {\n            if ((lp.indexOf(String.fromCodePoint(i)) > -1)) {\n                msg = `email cannot contain line formatting characters like \\\\n, \\\\t, etc`;\n                return { error: true, message: msg };\n            }\n        }\n\n        // Domain name should not contain consecutive dots\n        let m = -1;\n        for (let i = 0; i < dom.length; i++) {\n            m = dom.indexOf('.', m + 1); // starts from index 0, and finds the next instance of '.' with every loop\n            let n = m + 1; // n is index of the next character following the current dot\n            if (domArr[m] === domArr[n]) {\n                msg = `email: consecutive dots after @ is not allowed.`;\n                return { error: true, message: msg };\n            }\n        }\n\n        // domain name connot contain spaces\n        if ((dom.indexOf(' ') > -1)) {\n            msg = `email cannot contain spaces after @`;\n            return { error: true, message: msg };\n        }\n        // domain should end with .com, .org, .net, ...\n        if (!this.dotCom(str) && !this.dotOrg(str) && !this.dotNet(str)) {\n            msg = `email domain name must end with '.com', '.org' or '.net'`;\n            return { error: true, message: msg };\n        }\n\n        // leading dash in front of domain is invalid\n        if (dom[0] === '-') {\n            msg = `email: leading dash in front of domain is not allowed`;\n            return { error: true, message: msg }\n        }\n\n        // Rejects special characters in the domain name except '.' and non-leading dash (-)\n        for (let i = 0; i < dom.length; i++) {\n            if (!this.isValidDomChar(dom[i], dom)) {\n                msg = `email: special characters like \" ${dom[i]} \" is not allowed in the domain`;\n                return { error: true, message: msg };\n            }\n        }\n\n        // Return false if there is no dot in the domain (there must be a .*)\n        if (dom.indexOf('.') < 0) {\n            msg = `your email has an invalid domain name. Use .com, .org, or .net`;\n            return { error: true, message: msg };\n        }\n\n        // If an email passes all the tests above, then return this:\n        return { error: false, message: 'email is valid' };\n\n    }\n}\n\nexport default emailTest;"]}