{"version":3,"sources":["inspector.js"],"names":["Inspect","signup","req","res","next","response400","message","status","json","error","firstname","lastname","othernames","username","phoneNumber","email","password","confirmPassword","adminSecret","body","requiredFields","missingFields","map","field","index","keys","undefined","filter","join","Validator","isValidName","customValidateEmail","isMatchingPasswords","isValidPhoneNumber","isPasswordTooShort","toString","trim","picture","file","path"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,OAAN,CAAc;AACZ,SAAOC,MAAP,CAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B,UAAMC,cAAcC,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeE,OAAOH,OAAtB,EAArB,CAA/B;AACA,UAAM;AACJI,eADI;AAEJC,cAFI;AAGJC,gBAHI;AAIJC,cAJI;AAKJC,iBALI;AAMJC,WANI;AAOJC,cAPI;AAQJC,qBARI;AASJC;AATI,QAUFhB,IAAIiB,IAVR;;AAYA,UAAMC,iBAAiB,CAACV,SAAD,EAAYC,QAAZ,EAAsBG,WAAtB,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoDC,eAApD,CAAvB;AACA,UAAMI,gBAAgBD,eAAeE,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzD,YAAMC,OAAO;AACX,WAAG,WADQ;AAEX,WAAG,UAFQ;AAGX,WAAG,aAHQ;AAIX,WAAG,OAJQ;AAKX,WAAG,UALQ;AAMX,WAAG;AANQ,OAAb;AAQA,aAAQF,UAAUG,SAAV,IAAuBH,UAAU,EAAlC,GAAwCE,KAAKD,KAAL,CAAxC,GAAsD,IAA7D;AACD,KAVqB,EAUnBG,MAVmB,CAUZJ,SAASA,UAAU,IAVP,EAUaK,IAVb,CAUkB,IAVlB,CAAtB;;AAYA,QAAI,CAAClB,SAAD,IAAc,CAACC,QAAf,IAA2B,CAACG,WAA5B,IAA2C,CAACC,KAA5C,IAAqD,CAACC,QAAtD,IAAkE,CAACC,eAAvE,EAAwF;AACtF,aAAOZ,YAAa,kDAAiDgB,aAAc,EAA5E,CAAP;AACD;;AAED,QAAI,CAACQ,oBAAUC,WAAV,CAAsBpB,SAAtB,CAAL,EAAuC,OAAOL,YAAY,kEAAZ,CAAP;AACvC,QAAI,CAACwB,oBAAUC,WAAV,CAAsBnB,QAAtB,CAAL,EAAsC,OAAON,YAAY,gEAAZ,CAAP;AACtC,QAAIwB,oBAAUE,mBAAV,CAA8BhB,KAA9B,EAAqCN,KAAzC,EAAgD;AAC9C,aAAOJ,YAAYwB,oBAAUE,mBAAV,CAA8BhB,KAA9B,EAAqCT,OAAjD,CAAP;AACD;AACD,QAAI,CAACuB,oBAAUG,mBAAV,CAA8BhB,QAA9B,EAAwCC,eAAxC,CAAL,EAA+D,OAAOZ,YAAY,gCAAZ,CAAP;AAC/D,QAAI,CAACwB,oBAAUI,kBAAV,CAA6BnB,WAA7B,CAAL,EAAgD,OAAOT,YAAY,oGAAZ,CAAP;AAChD,QAAIwB,oBAAUK,kBAAV,CAA6BlB,QAA7B,CAAJ,EAA4C,OAAOX,YAAY,kEAAZ,CAAP;;AAE5CH,QAAIQ,SAAJ,GAAgBA,UAAUyB,QAAV,GAAqBC,IAArB,EAAhB;AACAlC,QAAIS,QAAJ,GAAeA,SAASwB,QAAT,GAAoBC,IAApB,EAAf;AACAlC,QAAIU,UAAJ,GAAiBA,cAAc,IAA/B;AACAV,QAAIW,QAAJ,GAAeA,YAAY,IAA3B;AACAX,QAAIY,WAAJ,GAAkBA,YAAYqB,QAAZ,GAAuBC,IAAvB,EAAlB;AACAlC,QAAIa,KAAJ,GAAYA,MAAMoB,QAAN,GAAiBC,IAAjB,EAAZ;AACAlC,QAAIc,QAAJ,GAAeA,SAASmB,QAAT,GAAoBC,IAApB,EAAf;AACAlC,QAAIgB,WAAJ,GAAkBA,YAAYiB,QAAZ,GAAuBC,IAAvB,EAAlB;AACAlC,QAAImC,OAAJ,GAAcnC,IAAIoC,IAAJ,GAAWpC,IAAIoC,IAAJ,CAASC,IAApB,GAA2B,IAAzC;;AAEA,WAAOnC,MAAP;AACD,GApDW,CAoDV;;;AApDU,C,CAuDZ;;kBAEaJ,O","file":"inspector.js","sourceRoot":"/home/enejakc/Documents/projects/ireporter-db-practice/server/middleware","sourcesContent":["import Validator from '../validators/validator';\nimport pool from '../db/config';\n\nclass Inspect {\n  static signup(req, res, next) {\n    const response400 = message => res.status(400).json({ status: 400, error: message });\n    const {\n      firstname,\n      lastname,\n      othernames,\n      username,\n      phoneNumber,\n      email,\n      password,\n      confirmPassword,\n      adminSecret,\n    } = req.body;\n\n    const requiredFields = [firstname, lastname, phoneNumber, email, password, confirmPassword];\n    const missingFields = requiredFields.map((field, index) => {\n      const keys = {\n        0: 'firstname',\n        1: 'lastname',\n        2: 'phoneNumber',\n        3: 'email',\n        4: 'password',\n        5: 'confirmPassword',\n      };\n      return (field === undefined || field === '') ? keys[index] : null;\n    }).filter(field => field !== null).join(', ');\n\n    if (!firstname || !lastname || !phoneNumber || !email || !password || !confirmPassword) {\n      return response400(`values are required form the following fields: ${missingFields}`);\n    }\n\n    if (!Validator.isValidName(firstname)) return response400('invalid first name. First name must be a minimum of 2 characters');\n    if (!Validator.isValidName(lastname)) return response400('invalid last name. Last name must be a minimum of 2 characters');\n    if (Validator.customValidateEmail(email).error) {\n      return response400(Validator.customValidateEmail(email).message);\n    }\n    if (!Validator.isMatchingPasswords(password, confirmPassword)) return response400('the two passwords do not match');\n    if (!Validator.isValidPhoneNumber(phoneNumber)) return response400('Invalid phone number. Phone number cannot contain characters, and must be less than 16 digits long');\n    if (Validator.isPasswordTooShort(password)) return response400('Invalid password. Password should have a minimum of 6 characters');\n\n    req.firstname = firstname.toString().trim();\n    req.lastname = lastname.toString().trim();\n    req.othernames = othernames || null;\n    req.username = username || null;\n    req.phoneNumber = phoneNumber.toString().trim();\n    req.email = email.toString().trim();\n    req.password = password.toString().trim();\n    req.adminSecret = adminSecret.toString().trim();\n    req.picture = req.file ? req.file.path : null;\n\n    return next();\n  } // END signup\n\n\n} // END Inspect\n\nexport default Inspect;\n"]}